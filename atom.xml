<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>lie on this ip ，I am lin</title>
  
  <subtitle>Technical blog</subtitle>
  <link href="//atom.xml" rel="self"/>
  
  <link href="babylovelin.github.io/"/>
  <updated>2018-01-31T06:54:33.203Z</updated>
  <id>babylovelin.github.io/</id>
  
  <author>
    <name>lin</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>cordova安卓环境配置</title>
    <link href="babylovelin.github.io/2018/01/31/cordovaEnvConfig/"/>
    <id>babylovelin.github.io/2018/01/31/cordovaEnvConfig/</id>
    <published>2018-01-31T02:55:06.000Z</published>
    <updated>2018-01-31T06:54:33.203Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装cordova-CLI"><a href="#安装cordova-CLI" class="headerlink" title="安装cordova CLI"></a>安装cordova CLI</h2><p>1下载安装nodejs。在这之后你和以使用node和npm包管理工具 <br><br>2安装git <br><br>3安装cordova  在OS X和Linux上: <br><br><code>$ sudo npm install -g cordova</code></p><h2 id="创建App"><a href="#创建App" class="headerlink" title="创建App"></a>创建App</h2><p><code>$ cordova create myapp</code> 创建一个文件夹名叫做myapp的项目 <br></p><h2 id="给你的App添加平台"><a href="#给你的App添加平台" class="headerlink" title="给你的App添加平台"></a>给你的App添加平台</h2><p><code>$ cd myapp</code></p><p>这个时候查看config.xml 还没有添加平台和平台的版本</p><p><code>$ cordova platform add android --save</code> 这样就添加了一个安卓平台，默认情况下，会添加最新版本的。安卓7.0</p><p>这时候再去查看config.xml，会发现，里面添加了 <code>&lt;engine name=&quot;android&quot; spec=&quot;~7.0.0&quot; /&gt;</code></p><p>这表示，已经成功添加了安卓平台</p><p>检查平台设置：<code>cordova platform ls</code></p><p>控制台显示：说明已经安装 安卓7.0.0 可用为以下几个</p><p><code>Installed platforms:  android 7.0.0Available platforms:  browser ~5.0.1  ios ~4.5.4  osx ~4.0.1  windows ~5.0.0  www ^3.12.0</code></p><p>接下来我们来构建App</p><h2 id="构建App"><a href="#构建App" class="headerlink" title="构建App"></a>构建App</h2><p><code>$ cordova build</code></p><p>控制台提示：</p><p><code>Android Studio project detected(node:7751) UnhandledPromiseRejectionWarning:Unhandled promise rejection (rejection id: 1): Failed to find &#39;ANDROID_HOME&#39; environment variable.Try setting it manually.Failed to find &#39;android&#39; command in your &#39;PATH&#39;. Try update your &#39;PATH&#39; to include path to valid SDK directory.</code></p><p>说明没有安卓环境。需要安卓SDK，以及JDK。</p><p>接下来参考安卓平台指南</p><h2 id="安卓环境构建"><a href="#安卓环境构建" class="headerlink" title="安卓环境构建"></a>安卓环境构建</h2>  <h5>Java开发工具包 JDK</h5><p>  依次执行<code>sudo add-apt-repository ppa:webupd8team/java</code>,<code>sudo apt-get update</code>,<code>sudo apt-get install oracle-java8-installer</code></p><p>  执行 <code>java -version</code> 显示 openJDK 版本，这样 JDK就那装成功了。至于oracle JDK，需要的自行安装。</p><p>  <div class="note"><br>    <h5>提示</h5><br>    <p>如果安装不上，或者其他问题，可能是因为你已经安装过其他的版本，需要将其他版本卸载，安装java8</p><br>  </div><br>  1、 移除所有 Java相关包 (Sun, Oracle, OpenJDK, IcedTea plugins, GIJ):</p><p>  (1) apt-get update</p><p>  (2) apt-cache search java | awk ‘{print($1)}’ | grep -E -e ‘^(ia32-)?(sun|oracle)-java’ -e ‘^openjdk-‘ -e ‘^icedtea’ -e ‘^(default|gcj)-j(re|dk)’ -e ‘^gcj-(.*)-j(re|dk)’ -e ‘java-common’ | xargs sudo apt-get -y remove</p><p>  (3) apt-get -y autoremove</p><p>  2、清除配置信息:  dpkg -l | grep ^rc | awk ‘{print($2)}’ | xargs sudo apt-get -y purge</p><p>  3、清除java配置及缓存:  bash -c ‘ls -d /home/*/.java’ | xargs sudo rm -rf</p><p>  4、手动清除JVMs:  rm -rf /usr/lib/jvm/*</p>  <h5>安卓SDK</h5><p>  注意，在linux上要装linux版本的SDK。。。</p><p>  在Mac或者Linux上面，你可以使用文本编辑器来创建或者修改文件<code>~/.bash_profile</code></p><p>  为了设置一个环境变量，添加一行，使用export像下面这样(用你本地安装路径替代路径):</p><p>  <code>export ANDROID_HOME=/Development/android-sdk/</code> 路径从根路径开始写</p><p>  为了更新PATH,添加一行类似下面这样(路径替换为你本地的Android SDK安装路径):</p><p>  <code>export PATH=${PATH}:/Development/android-sdk/platform-tools:/Development/android-sdk/tools</code></p><p>  重新启动终端或者运行下面命令来看变化带来的反应:</p><p>  <code>$ source ~/.bash_profile</code></p><p>  如果没有任何反应，说明配好了。</p><p>  <div class="note info"><br>    <h5>注意<h5><br>    <p>目前版本，是需要android-26的，所以直接下载这个版本的SDK，或者下载android-studio，这个在调试项目时也会使用。<br>    在这个IDE里面，有SDK的管理工具。点击-26版本,下载一下就好了，这里面配置的SDK路径和设置的环境变量里面的路径是一致的。</p><br>  </h5></h5></div></p><h2 id="Gradle"><a href="#Gradle" class="headerlink" title="Gradle"></a>Gradle</h2><p>  安装Android-studio时，会自动下载gradle，不过，速度很慢，还可能中途断掉，所以，建议在官网上自行下载压缩包，然后配置环境变量。</p><p>  如果你不希望所有用户都使用这个配置，那么可以单独为自己的账号配置gradle环境，在自己账号的HOME目录下</p><p>  $vi ~/.bash_profile</p><p>  <code>export GRADLE_HOME=/home/tangzhiqiang/dev/gradle-2.6</code></p><p>  <code>export PATH=$GRADLE_HOME/bin:$PATH</code></p><p>  保存退出后，让修改及时生效，执行</p><p>  <code>$source /etc/profile</code></p><p>  查看gradle版本信息</p><p>  <code>$ gradle -version</code></p><p>  下边我们再执行</p><p>  <code>$ cordova requirements</code></p><p>  显示</p><p>  <code>Requirements check results for android:  Java JDK: installed 1.8.0  Android SDK: installed true  Android target: installed android-27,android-26,android-24,Google Inc.:Google  APIs:24,android-23,Google Inc.:Google APIs:23,android-22,Google Inc.:Google  APIs:22,android-21,Google Inc.:Google APIs:21,android-19,Google Inc.:Glass Development Kit  Preview:19,Google Inc.:Google APIs:19,android-18,Google Inc.:Google APIs:18,android-17,Google  Inc.:Google APIs:17,android-16,Google Inc.:Google APIs:16,android-15,Google Inc.:Google APIs:15  Gradle: installed /home/hhl/Android/gradle/gradle-4.4/bin/gradle</code></p><p>  这样环境就OK了。</p><h2 id="Build"><a href="#Build" class="headerlink" title="Build"></a>Build</h2><p>  执行</p><p>  <code>$ cordova build</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;安装cordova-CLI&quot;&gt;&lt;a href=&quot;#安装cordova-CLI&quot; class=&quot;headerlink&quot; title=&quot;安装cordova CLI&quot;&gt;&lt;/a&gt;安装cordova CLI&lt;/h2&gt;&lt;p&gt;1下载安装nodejs。在这之后你和以使用node和
      
    
    </summary>
    
    
      <category term="cordova" scheme="babylovelin.github.io/tags/cordova/"/>
    
  </entry>
  
  <entry>
    <title>cordova简介</title>
    <link href="babylovelin.github.io/2018/01/31/cordovaIntro/"/>
    <id>babylovelin.github.io/2018/01/31/cordovaIntro/</id>
    <published>2018-01-31T02:20:00.000Z</published>
    <updated>2018-01-31T02:51:50.341Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>cordova 是一个开源的移动开发框架，允许使用标准的web技术，<code>HTML5 CSS3 Javascript</code>进行跨平台开发。应用程序在每个平台的包装内置行，依靠标准的API来绑定每个设备的传感器，数据和网络状态～</p><h2 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h2><p>我们可以开发一个应用程序，将在不同的移动平台上使用。</p><h2 id="平台"><a href="#平台" class="headerlink" title="平台"></a>平台</h2><p><code>IOS</code>，<code>Android</code>，<code>Windows Phone</code>，<code>Amazon-fireos</code>，<code>黑莓</code>，<code>Firefox OS</code>，<code>Ubuntu</code>和<code>tizien</code></p><p><div class="note warning"><br>    <h5>限制</h5><br>    <p>混合应用程序比本地应用程序慢，因此对于需要大量数据和功能的大型应用程序使用Cordova不是最佳选择。</p><br></div><br>  </p><p>跨浏览器兼容性可能会产生很多问题。大多数时候，我们为不同的平台构建应用程序，所以测试和优化可能需要很多时间，因为我们需要覆盖大量的设备和操作系统。某些插件与不同的设备和平台存在兼容性问题。还有一些Cordova尚不支持的本机API。</p><p></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;cordova 是一个开源的移动开发框架，允许使用标准的web技术，&lt;code&gt;HTML5 CSS3 Javascript&lt;/code&gt;进行
      
    
    </summary>
    
    
      <category term="cordova" scheme="babylovelin.github.io/tags/cordova/"/>
    
  </entry>
  
  <entry>
    <title>辨析 Sass 中的 Map 和 List</title>
    <link href="babylovelin.github.io/2015/10/21/demo/"/>
    <id>babylovelin.github.io/2015/10/21/demo/</id>
    <published>2015-10-21T02:34:12.000Z</published>
    <updated>2018-01-30T08:21:28.030Z</updated>
    
    <content type="html"><![CDATA[<p>如果你使用过 Sass 3.3 之前的版本，那么你一定对那段时光颇有感触，那时候没有现如今这么好的条件，那时候的 Map 还只能用多重列表（lists of list）来模拟。多重列表可以实现复杂数据的嵌套定义，但却不是以键值对的形式实现的，所有当我们需要获取其中特定的某一项时就会比较麻烦。Map 这种数据类型天生就是基于键值对的形式，非常便于组织数据。</p><p>自从可以使用 Map 之后，开发者们开始毫无顾忌地定义 Map 存储数据，比如断点宽度、颜色值、栅格布局等等响应式排版的细节，都被一股脑的塞进了 Map 中。</p><p>那么，有了 Map 之后，我们还有必要使用 List 吗？可能某些人会觉得为了保持向后兼容应该继续使用多重列表模拟 Map，因为可能有些开发者仍然在使用老版本的 Sass 编译器，但实际上，这是多此一举了，Sass 的版本通常由 <code>package.json</code> 或者其他同类型的项目配置文件所控制，往往只需一条命令（<code>gem update sass</code>）即可更新 Sass 的版本，因此基本上无需考虑对老版本的兼容问题。</p><a id="more"></a><p>使用多重列表替代 Map 的优势之一就是减少代码量。下面让我们来比较一下多种列表和 Map 的语法结构以及遍历方式。</p><h2 id="测试表格"><a href="#测试表格" class="headerlink" title="测试表格"></a>测试表格</h2><table><thead><tr><th>Variable</th><th>Description</th></tr></thead><tbody><tr><td><code>site</code></td><td>Sitewide information.</td></tr><tr><td><code>page</code></td><td>Page specific information and custom variables set in front-matter.</td></tr><tr><td><code>config</code></td><td>Site configuration</td></tr><tr><td><code>theme</code></td><td>Theme configuration. Inherits from site configuration.</td></tr><tr><td><code>_</code> (single underscore)</td><td><a href="http://lodash.com/" target="_blank" rel="noopener">Lodash</a> library</td></tr><tr><td><code>path</code></td><td>Path of current page</td></tr><tr><td><code>url</code></td><td>Full URL of current page</td></tr><tr><td><code>env</code></td><td>Environment variables</td></tr></tbody></table><h2 id="语法比较"><a href="#语法比较" class="headerlink" title="语法比较"></a>语法比较</h2><div class="note"><br>    <h5>测试标题</h5><br>    <p>在下面的示例中，我创建了一个用于控制响应式布局的数据，该数据一共有四个断点，每一个断点都包含了 <code>min-width</code>、<code>max-width</code>、<code>font-size</code> 和 <code>line-height</code> 四个样式。</p><br></div><h4 id="Map-语法"><a href="#Map-语法" class="headerlink" title="Map 语法"></a>Map 语法</h4><p>下面就是使用 Map 存储的数据，具体来说，该 Map 中首先存储了四个用于标识断点的 Key，相对应的是保存具体属性值得 Value。虽然这种形式可读性更高，但是总体代码量却高达 26 行 450 个字符。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">$breakpoint-map: (</span><br><span class="line">    small: (</span><br><span class="line">        min-width: null,</span><br><span class="line">        max-width: 479px,</span><br><span class="line">        base-font: 16px,</span><br><span class="line">        vertical-rhythm: 1.3</span><br><span class="line">    ),</span><br><span class="line">    medium: (</span><br><span class="line">        min-width: 480px,</span><br><span class="line">        max-width: 959px,</span><br><span class="line">        base-font: 18px,</span><br><span class="line">        vertical-rhythm: 1.414</span><br><span class="line">    ),</span><br><span class="line">    large: (</span><br><span class="line">        min-width: 960px,</span><br><span class="line">        max-width: 1099px,</span><br><span class="line">        base-font: 18px,</span><br><span class="line">        vertical-rhythm: 1.5</span><br><span class="line">    ),</span><br><span class="line">    xlarge: (</span><br><span class="line">        min-width: 1100px,</span><br><span class="line">        max-width: null,</span><br><span class="line">        base-font: 21px,</span><br><span class="line">        vertical-rhythm: 1.618</span><br><span class="line">    )</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h4 id="多重列表语法"><a href="#多重列表语法" class="headerlink" title="多重列表语法"></a>多重列表语法</h4><p>下面的多重列表存储了和上面 Map 同样的数据，在多重列表中没有 Key-Value 的对应关系，这意味着要想找到特定的值，必须使用遍历或 <code>nth()</code> 的方式来实现了。从另一个角度来看，多种列表又比 Map 的代码量小得多，总共只有六行 180 个字符。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$breakpoint-list: (</span><br><span class="line">    (small, null, 479px, 16px, 1.3),</span><br><span class="line">    (medium, 480px, 959px, 18px, 1.414),</span><br><span class="line">    (large, 960px, 1099px, 18px, 1.5),</span><br><span class="line">    (xlarge, 1100px, null, 21px, 1.618)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="遍历比较"><a href="#遍历比较" class="headerlink" title="遍历比较"></a>遍历比较</h2><div class="note info"><br>    <h5>测试标题</h5><br>    <p>从上面简单地比较中可以粗略的看出，多种列表的代码量明显少于 Map。但是，如果我们需要遍历这些值得话，复杂度又是怎样的呢？</p><br></div><h4 id="遍历-Map"><a href="#遍历-Map" class="headerlink" title="遍历 Map"></a>遍历 Map</h4><p>我们可以使用如下的代码遍历 Map：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@each $label, $map in $breakpoint-map &#123;&#125;</span><br></pre></td></tr></table></figure><p>这里的变量 <code>$label</code> 和 <code>$map</code> 会随着对 <code>$breakpoint-map</code> 的遍历被动态地赋值，<code>$label</code> 将会被赋值为 <code>$breakpoint-map</code> 的 Key，而 <code>$map</code> 会被赋值为 <code>$breakpoint-map</code> 的 Value。为了在遍历过程中获取特定值，我们就需要使用 Sass 原生的 <code>map-get()</code> 函数，使用该函数需要传入两个参数：Map 的名字和求取的 Key，最后返回该 Map 中匹配该 Key 的 Value。</p><p>具体的做法就是使用 <code>@each</code> 遍历 Map，然后使用 <code>map-get()</code> 获取特定值，最终只需要六行代码 220 个字符即可完成整个遍历：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@each $label, $map in $breakpoint-map &#123;</span><br><span class="line">    $min-width: map-get($map, min-width);</span><br><span class="line">    $max-width: map-get($map, max-width);</span><br><span class="line">    $base-font: map-get($map, base-font);</span><br><span class="line">    $vertical-rhythm: map-get($map, vertical-rhythm);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="遍历多重列表"><a href="#遍历多重列表" class="headerlink" title="遍历多重列表"></a>遍历多重列表</h4><p>遍历多重列表不必像遍历 Map 一样动态获取到 Map 后再使用 <code>map-get()</code> 函数取特定值，直接遍历一遍即可获得特定值。</p><p>因为多种列表内层的每一个列表结构相同，都有按照相同顺序排列的五个值，所以我们可以持续遍历每个值并赋值给特定的变量。无需调用 <code>map-get()</code>，直接引用这些变量即可进行赋值等裸机操作。最终遍历多重列表只使用了两行代码 100 个字符：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@each $label, $min-width, $max-width, $base-font, $vertical-rhythm in $breakpoint-list &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="慎用多重列表"><a href="#慎用多重列表" class="headerlink" title="慎用多重列表"></a>慎用多重列表</h2><div class="note warning"><br>    <h5>测试标题</h5><br>    <p>经过上述的比对，看起来多重列表各方面都在碾压 Map，实则不然，Sass 中添加 Map 有一条非常重要的原因就是：Key-Value 的映射关系。</p><br></div><h4 id="遗漏键值"><a href="#遗漏键值" class="headerlink" title="遗漏键值"></a>遗漏键值</h4><p>如果要使用多重列表，那么就必须保证自己非常熟悉多重列表内部的每一项所代表的意义。下面我们举个例子，来看看遗漏了某些值的情况：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">$breakpoint-list: (</span><br><span class="line">    (small, null, 479px, 16px, 1.3),</span><br><span class="line">    (medium, 480px, 959px, 18px, 1.414),</span><br><span class="line">    (large, 960px, 1099px, 18px, 1.5),</span><br><span class="line">    (xlarge, 1100px, 21px, 1.618)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">p &#123;</span><br><span class="line">    @each $label, $min-width, $max-width, $base-font, $vertical-rhythm in $breakpoint-list &#123;</span><br><span class="line">        @if $min-width &#123;</span><br><span class="line">            @include breakpoint( $min-width ) &#123;</span><br><span class="line">                font-size: $base-font;</span><br><span class="line">                line-height: $vertical-rhythm;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; @else &#123;</span><br><span class="line">            font-size: $base-font;</span><br><span class="line">            line-height: $vertical-rhythm;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当我们尝试运行这段代码时，结果肯定是错误地，因为在 <code>$breakpoint-list</code> 的最后一行，<code>xlarge</code> 被赋值给了 <code>$label</code>，<code>1100px</code> 被赋值给了 <code>$min-width</code>，<code>21px</code> 被赋值给了 <code>$max-width</code>, <code>1.618</code> 被赋值给了 <code>$base-font</code>，最终导致 <code>$vertical-rhythm</code> 没有被赋值，结果就是 <code>font-size</code> 的属性值是错的，<code>line-height</code> 的属性值是空的。此外，Sass 还不会对此抛出错误，导致我们无从知晓错误所在。</p><p>如果我们使用 Map 来代替这里的多重列表，那么使用 <code>map-get()</code> 函数即使遇见空值也能正确获得想要的结果。这就是值得我们慎重思考的地方：多种列表虽然简单快速，但是丧失了 Map 中的容错能力和快速取值能力。</p><h4 id="查找特定列表"><a href="#查找特定列表" class="headerlink" title="查找特定列表"></a>查找特定列表</h4><p>在多重列表中查找特定列表简直就是一种折磨。如果使用 Map，那么配合 <code>map-get()</code> 函数可以快速定位到特定子 Map：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$medium-map: map-get($maps, medium);</span><br></pre></td></tr></table></figure><p>但如果要获取多种列表 <code>medium</code> 列表，麻烦可就大了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@function get-list($label) &#123;</span><br><span class="line">    @each $list in $breakpoint-list &#123;</span><br><span class="line">        @if nth($list, 1) == $label &#123;</span><br><span class="line">            @return $list;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    @return null;</span><br><span class="line">&#125;</span><br><span class="line">$medium-list: get-list(medium);</span><br></pre></td></tr></table></figure><p>这段代码的逻辑就是遍历整个多重列表，知道找到第一个匹配项，然后返回，如果一直没有找到匹配项，就一直遍历到末尾，然后返回 <code>null</code>。这实际上就是手工实现了 <code>map-get()</code> 的逻辑。</p><h4 id="缺少原生的-Map-函数"><a href="#缺少原生的-Map-函数" class="headerlink" title="缺少原生的 Map 函数"></a>缺少原生的 Map 函数</h4><p>Sass 提供了诸多的原生函数用于处理 Map 数据类型，但是多重列表是没法调用这些函数的，比如，使用 <code>map-merge()</code> 可以合并两个 Map，如果两个 Map 有相同的值，则取第二个 Map 的值为最终值。当然你也可以在多重列表中使用 <code>join()</code> 或 <code>append()</code> 来增加新列表，从而模拟出 <code>map-merge()</code> 的效果。</p><p>另一个实用的 Map 函数就是 <code>map-has-key()</code>，对于依赖 <code>map-get()</code> 的自定义函数来说，<code>map-has-key()</code> 可以用来验证特定的 Key 是否存在。但在列表中是完全没有相似的方法。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><div class="note unreleased"><br>    <h5>Test Title</h5><br>    <p>相比起列表来说，Key-Value 模型的 Map 显然更有力量，原生的 Sass Map 函数更是提供了强力的数据查找和验证工具。</p><br></div><p>虽然多重列表代码量少，但并不能像 Map 一样进行错误检查或验证参数。在大多数时候，相比较多重列表而言，我相信 Map 是更好的选择。如果是为了更少的代码量和其他简单地调用，那么我偶尔会用用多重列表，但是从项目的宏观控制和数据存储方面显然更优秀。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如果你使用过 Sass 3.3 之前的版本，那么你一定对那段时光颇有感触，那时候没有现如今这么好的条件，那时候的 Map 还只能用多重列表（lists of list）来模拟。多重列表可以实现复杂数据的嵌套定义，但却不是以键值对的形式实现的，所有当我们需要获取其中特定的某一项时就会比较麻烦。Map 这种数据类型天生就是基于键值对的形式，非常便于组织数据。&lt;/p&gt;
&lt;p&gt;自从可以使用 Map 之后，开发者们开始毫无顾忌地定义 Map 存储数据，比如断点宽度、颜色值、栅格布局等等响应式排版的细节，都被一股脑的塞进了 Map 中。&lt;/p&gt;
&lt;p&gt;那么，有了 Map 之后，我们还有必要使用 List 吗？可能某些人会觉得为了保持向后兼容应该继续使用多重列表模拟 Map，因为可能有些开发者仍然在使用老版本的 Sass 编译器，但实际上，这是多此一举了，Sass 的版本通常由 &lt;code&gt;package.json&lt;/code&gt; 或者其他同类型的项目配置文件所控制，往往只需一条命令（&lt;code&gt;gem update sass&lt;/code&gt;）即可更新 Sass 的版本，因此基本上无需考虑对老版本的兼容问题。&lt;/p&gt;
    
    </summary>
    
    
      <category term="css" scheme="babylovelin.github.io/tags/css/"/>
    
  </entry>
  
</feed>
