<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>lie on this ip ，I am lin</title>
  
  <subtitle>Technical blog</subtitle>
  <link href="//atom.xml" rel="self"/>
  
  <link href="babylovelin.github.io/"/>
  <updated>2018-02-02T08:25:03.021Z</updated>
  <id>babylovelin.github.io/</id>
  
  <author>
    <name>lin</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>createVueByCli-mobile</title>
    <link href="babylovelin.github.io/2018/02/02/createVueProjectByCli/"/>
    <id>babylovelin.github.io/2018/02/02/createVueProjectByCli/</id>
    <published>2018-02-02T02:34:13.000Z</published>
    <updated>2018-02-02T08:25:03.021Z</updated>
    
    <content type="html"><![CDATA[<h2 id="vue-cli"><a href="#vue-cli" class="headerlink" title="vue-cli"></a>vue-cli</h2><p>  <code>全局安装 vue-cli   $ npm install --global vue-cli   创建一个基于 webpack 模板的新项目   $ vue init webpack my-project   安装依赖，走你   $ cd my-project   $ npm install   $ npm run dev</code></p><p>   这样就新建好了一个基础的vue项目</p><h2 id="安装-less"><a href="#安装-less" class="headerlink" title="安装 less"></a>安装 less</h2><p>  <code>npm install less --save-devnpm install less-loader --save-dev</code></p><p>这里不需要再添加loader的配置，cli中已经配置好了</p><h2 id="配置index"><a href="#配置index" class="headerlink" title="配置index"></a>配置index</h2>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width,initial-scale=1.0,maximum-scale=1,minimum-scale=1,user-scalable=no"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>  配置rem，根源素的字体大小为屏宽的十分之一，以iphone6为例，屏宽375，那么rem为375/10=37.5px<br>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">'text/javascript'</span>&gt;</span><br><span class="line">  <span class="built_in">document</span>.getElementsByTagName(<span class="string">'html'</span>)[<span class="number">0</span>].style.fontSize = <span class="built_in">window</span>.screen.width / <span class="number">10</span> + <span class="string">'px'</span>;</span><br><span class="line">  <span class="built_in">document</span>.documentElement.addEventListener(<span class="string">'touchstart'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (event.touches.length &gt; <span class="number">1</span>) &#123;</span><br><span class="line">    event.preventDefault();</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;, <span class="literal">false</span>);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="配置vux"><a href="#配置vux" class="headerlink" title="配置vux"></a>配置vux</h2>  <div class="note info"><br>    <h5>vux</h5><br>    <p>是基于WeUI和Vue(2.x)开发的移动端UI组件库,用于移动端开发</p><br>  </div><p>  安装：</p><p>  <code>npm install vux --save</code></p><p>  vux2必须配合vux-loader使用, 请在build/webpack.base.conf.js里参照如下代码进行配置</p><p>  <code>const vuxLoader = require(&#39;vux-loader&#39;)const webpackConfig = originalConfig // 原来的 module.exports 代码赋值给变量 webpackConfigmodule.exports = vuxLoader.merge(webpackConfig, {plugins: [&#39;vux-ui&#39;]})</code></p><p>  一些优化：</p><p>  1引入 reset.less，默认样式不包含reset，并且部分用户自己有一套reset样式，因此需要在App.vue进行手动引入</p>  <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;style lang="less"&gt;</span><br><span class="line"><span class="keyword">@import</span> <span class="string">'~vux/src/styles/reset.less'</span>;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>  2配置 vux-loader</p><p>  <code>npm i vux-loader --save</code></p><p>  请在build/webpack.base.conf.js里参照如下代码进行配置：</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> vuxLoader = <span class="built_in">require</span>(<span class="string">'vux-loader'</span>)</span><br><span class="line"><span class="keyword">const</span> webpackConfig = originalConfig <span class="comment">// 原来的 module.exports 代码赋值给变量 webpackConfig</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = vuxLoader.merge(webpackConfig, &#123;</span><br><span class="line">  plugins: [<span class="string">'vux-ui'</span>]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>  在helloworld替换成如下代码，如果出现了alert框，那么就成功了<br>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"hello"</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">alert</span> <span class="attr">v-model</span>=<span class="string">"show"</span> <span class="attr">:title</span>=<span class="string">"'Congratulations'"</span> <span class="attr">:content</span>=<span class="string">"'Your Message is sent successfully~'"</span>&gt;</span><span class="tag">&lt;/<span class="name">alert</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> &#123; Alert &#125; <span class="keyword">from</span> <span class="string">'vux'</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  name: <span class="string">'HelloWorld'</span>,</span></span><br><span class="line"><span class="undefined">  data () &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">      show:<span class="literal">true</span></span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="undefined">  components: &#123;</span></span><br><span class="line"><span class="undefined">    Alert</span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Add "scoped" attribute to limit CSS to this component only --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span> <span class="attr">lang</span>=<span class="string">'less'</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">@import '~vux/src/styles/reset.less';</span></span><br><span class="line"><span class="undefined">.hello&#123;</span></span><br><span class="line"><span class="undefined">  font-size: 1rem</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>  3配置babel-loader以正确编译 VUX 的js源码（通过配置vux-loader实现）</p><p>  <code>plugins: [{  name: &#39;vux-ui&#39;}]</code><br>  4安装less-loader以正确编译less源码</p><p>  5安装 yaml-loader 以正确进行语言文件读取</p><p>  <code>npm install yaml-loader --save-dev</code></p><p>  6添加viewport meta</p><p>  <code>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,initial-scale=1,user-scalable=0&quot;&gt;</code></p><p>  7添加Fastclick移除移动端点击延迟</p><p>  <code>const FastClick = require(&#39;fastclick&#39;)FastClick.attach(document.body)</code></p><p>  8添加webpack plugin, 在构建后去除重复css代码（通过配置vux-loader实现）</p><p>  <code>plugins: [{  name: &#39;duplicate-style&#39;}]</code></p><p>  9如果你使用 webpack-simple 模板或者 webpack 配置里缺少 .vue extension 配置，请记得配置</p><p>  <code>resolve: {  extensions: [&#39;.js&#39;, &#39;.vue&#39;, &#39;.json&#39;]</code></p><p>  10 SEO优化 添加谷歌统计</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">i,s,o,g,r,a,m</span>)</span>&#123;i[<span class="string">'GoogleAnalyticsObject'</span>]=r;i[r]=i[r]||<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">(i[r].q=i[r].q||[]).push(<span class="built_in">arguments</span>)&#125;,i[r].l=<span class="number">1</span>*<span class="keyword">new</span> <span class="built_in">Date</span>();a=s.createElement(o),</span><br><span class="line">m=s.getElementsByTagName(o)[<span class="number">0</span>];a.async=<span class="number">1</span>;a.src=g;m.parentNode.insertBefore(a,m)</span><br><span class="line">&#125;)(<span class="built_in">window</span>,<span class="built_in">document</span>,<span class="string">'script'</span>,<span class="string">'https://www.google-analytics.com/analytics.js'</span>,<span class="string">'ga'</span>);</span><br><span class="line"></span><br><span class="line">ga(<span class="string">'create'</span>, <span class="string">'UA-yourID'</span>, <span class="string">'auto'</span>)</span><br><span class="line">ga(<span class="string">'send'</span>, <span class="string">'pageview'</span>) <span class="comment">// 是否要统计着陆页面访问，取决于你的需求，这个不一定需要，会和`router`统计有重复</span></span><br><span class="line"><span class="comment">// main.js 里，如果你使用了 vue-router</span></span><br><span class="line">router.afterEach(<span class="function"><span class="keyword">function</span> (<span class="params">to</span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">window</span>.ga) &#123;</span><br><span class="line">  <span class="built_in">window</span>.ga(<span class="string">'set'</span>, <span class="string">'page'</span>, to.fullPath) <span class="comment">// 你可能想根据请求参数添加其他参数，可以修改这里的 to.fullPath</span></span><br><span class="line">  <span class="built_in">window</span>.ga(<span class="string">'send'</span>, <span class="string">'pageview'</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="界面优化"><a href="#界面优化" class="headerlink" title="界面优化"></a>界面优化</h2><p>1- - - -切换页面显示loading  </p><div class="note info"><br>  <h5>vue-router  vuex</h5><br>  <p>安装vuex <code>npm i vuex --save</code></p><br></div><p>在mian.js中，先引入vuex</p><p><code>import Vuex from &#39;vuex&#39;</code></p><p><code>Vue.use(Vuex)</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;&#125;) <span class="comment">// 这里你可能已经有其他 module</span></span><br><span class="line"></span><br><span class="line">store.registerModule(<span class="string">'vux'</span>, &#123; <span class="comment">// 名字自己定义</span></span><br><span class="line">  state: &#123;</span><br><span class="line">    isLoading: <span class="literal">false</span></span><br><span class="line">  &#125;,</span><br><span class="line">  mutations: &#123;</span><br><span class="line">    updateLoadingStatus (state, payload) &#123;</span><br><span class="line">      state.isLoading = payload.isLoading</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>在App.vue里使用loading组件并从vuex获取isLoading状态</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;loading v-model=<span class="string">"isLoading"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">loading</span>&gt;</span></span></span><br><span class="line"><span class="keyword">import</span> &#123; Loading &#125; <span class="keyword">from</span> <span class="string">'vux'</span></span><br><span class="line"><span class="keyword">import</span> &#123; mapState &#125; <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  components: &#123;</span><br><span class="line">    Loading</span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    ...mapState(&#123;</span><br><span class="line">      isLoading: <span class="function"><span class="params">state</span> =&gt;</span> state.vux.isLoading</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这里，我们采用rem来进行前端尺寸的调整,我们以ipone6为设计尺寸，1rem=20px</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementsByTagName(<span class="string">'html'</span>)[<span class="number">0</span>].style.fontSize = <span class="number">20</span> * <span class="built_in">window</span>.clientWidth.width / <span class="number">640</span> + <span class="string">'px'</span>;</span><br></pre></td></tr></table></figure><p>2 —- 点击延迟</p><p>在mian.js中加入</p><p><code>const FastClick = require(&#39;fastclick&#39;)FastClick.attach(document.body)</code></p><p>3 —-异步加载组件</p><p>将所有页面组件一次性加载是一个很浪费资源和考验用户耐心的做法，尤其在移动端。</p><p>webpack 提供了code splitting，你可以按照下面写法实现当切换到特定路由时才加载代码。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  path: <span class="string">'/somepath'</span>,</span><br><span class="line">  component: <span class="function"><span class="keyword">function</span> (<span class="params">resolve</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">require</span>([<span class="string">'./demos/somepath.vue'</span>], resolve)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="工具库"><a href="#工具库" class="headerlink" title="工具库"></a>工具库</h2><p>1 - - - base64</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; base64 &#125; <span class="keyword">from</span> <span class="string">'vux'</span></span><br><span class="line"></span><br><span class="line">base64.encode(<span class="string">'VUX'</span>)</span><br><span class="line">base64.decode(<span class="string">'VlVY'</span>)</span><br></pre></td></tr></table></figure><p>2 - - - md5</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; md5 &#125; <span class="keyword">from</span> <span class="string">'vux'</span></span><br><span class="line"></span><br><span class="line">md5(<span class="string">'VUX'</span>)</span><br></pre></td></tr></table></figure><p>3 - - -date 日期格式化</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; dateFormat &#125; <span class="keyword">from</span> <span class="string">'vux'</span></span><br><span class="line"></span><br><span class="line">dateFormat(<span class="keyword">new</span> <span class="built_in">Date</span>(), <span class="string">'YYYY-MM-DD HH:mm:ss'</span>)</span><br></pre></td></tr></table></figure><p>4 - - -number 格式化工具</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//numberComma用于分割数字，默认为3位分割，一般用于格式化金额。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//numberPad用于按照位数补0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//numberRandom用于生成两个整数范围内的随机整数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; numberComma, numberPad, numberRandom &#125; <span class="keyword">from</span> <span class="string">'vux'</span></span><br><span class="line">numberComma(<span class="number">21342132</span>) <span class="comment">// 21,342,132</span></span><br><span class="line">numberComma(<span class="number">21342132</span>, <span class="number">4</span>) <span class="comment">// 2134,2132</span></span><br><span class="line">numberComma(<span class="number">21342132.234</span>) <span class="comment">// 21,342,132.234</span></span><br><span class="line"></span><br><span class="line">numberPad(<span class="number">1</span>) <span class="comment">// 01</span></span><br><span class="line">numberPad(<span class="number">234</span>, <span class="number">4</span>) <span class="comment">// 0234</span></span><br><span class="line"></span><br><span class="line">numberRandom(<span class="number">1</span>, <span class="number">7</span>) <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><p>5 - - -string 处理工具</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; stringTrim &#125; <span class="keyword">from</span> <span class="string">'vux'</span></span><br><span class="line"></span><br><span class="line">stringTrim(<span class="string">' 1024 '</span>) <span class="comment">// 1024</span></span><br></pre></td></tr></table></figure><p>6 - - -url 参数解析</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; querystring &#125; <span class="keyword">from</span> <span class="string">'vux'</span></span><br><span class="line"></span><br><span class="line">querystring.parse(<span class="string">'a=b&amp;c=d'</span>) <span class="comment">// &#123;a:'b',c:'d'&#125;, 默认参数为 location.search</span></span><br><span class="line"></span><br><span class="line">querystring.stringify(&#123;<span class="attr">a</span>:<span class="string">'b'</span>,<span class="attr">c</span>:<span class="string">'d'</span>&#125;) <span class="comment">// 'a=b&amp;c=d'，注意不支持复杂嵌套的结构</span></span><br></pre></td></tr></table></figure><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>以上的配置就已经满足了移动端开发的基本要求了，接下来如果想利用vux来进行移动端的开发，那么请参考vux官网。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;vue-cli&quot;&gt;&lt;a href=&quot;#vue-cli&quot; class=&quot;headerlink&quot; title=&quot;vue-cli&quot;&gt;&lt;/a&gt;vue-cli&lt;/h2&gt;&lt;p&gt;  &lt;code&gt;全局安装 vue-cli
   $ npm install --global vue
      
    
    </summary>
    
    
      <category term="vue" scheme="babylovelin.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>socket.io</title>
    <link href="babylovelin.github.io/2018/02/01/socletio/"/>
    <id>babylovelin.github.io/2018/02/01/socletio/</id>
    <published>2018-02-01T02:05:44.000Z</published>
    <updated>2018-02-01T06:07:54.251Z</updated>
    
    <content type="html"><![CDATA[<p>  实现功能：群体聊天，谁进了聊天室，谁离开了聊天室，一共有多少人</p><h2 id="服务器端"><a href="#服务器端" class="headerlink" title="服务器端"></a>服务器端</h2><p>  我们用express</p><p>  首先引用 <code>var express = require(&#39;express&#39;);</code></p><p>  实例化 <code>var app = express();</code></p><p>  设置需要绑定的服务器 <code>var server = require(&#39;http&#39;).Server(app);</code>这里就是app了</p><p>  将socket.io用在这个服务器上 <code>var io = require(&#39;socket.io&#39;)(server);</code></p><p>  引入node自带的path <code>var path = require(&#39;path&#39;);</code></p><p>  设置监听端口  <code>var port = process.env.PORT || 3000;</code></p><p>  设置路由</p><p>  <code>app.get(&#39;/&#39;, function(req, res) {    res.sendFile(__dirname + &#39;/public/index.html&#39;); 这里要在根目录下新建public文件夹，index.html  });</code></p><p>  socket连上时</p><p>  <code>io.on(&#39;connection&#39;,(socket)=&gt;{        在这里写入socket的操作        socket.on 接收来自客户端的socket        socket.emit 向客户端发送socket        socket.broadcast.emit 向客户端进行广播    })</code></p><p>  最后服务器监听端口</p><p>  <code>server.listen(port, () =&gt; {  console.log(&#39;Server listening at port %d&#39;, port);  });</code></p><h2 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">index.html</span><br><span class="line"></span><br><span class="line">&lt;!doctype html&gt;</span><br><span class="line">    &lt;html lang=&quot;en&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;head&gt;</span><br><span class="line">      &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">      &lt;title&gt;Socket.IO Chat Example&lt;/title&gt;</span><br><span class="line">      &lt;link rel=&quot;stylesheet&quot; href=&quot;style.css&quot;&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line"></span><br><span class="line">    &lt;body&gt;</span><br><span class="line">      &lt;ul class=&quot;pages&quot;&gt;</span><br><span class="line">        &lt;li class=&quot;chat page&quot;&gt;</span><br><span class="line">          &lt;div class=&quot;chatArea&quot;&gt;</span><br><span class="line">            &lt;ul class=&quot;messages&quot;&gt;&lt;/ul&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">          &lt;input class=&quot;inputMessage&quot; placeholder=&quot;Type here...&quot; /&gt;</span><br><span class="line">        &lt;/li&gt;</span><br><span class="line">        &lt;li class=&quot;login page&quot;&gt;</span><br><span class="line">          &lt;div class=&quot;form&quot;&gt;</span><br><span class="line">            &lt;h3 class=&quot;title&quot;&gt;What&apos;s your nickname?&lt;/h3&gt;</span><br><span class="line">            &lt;input class=&quot;usernameInput&quot; type=&quot;text&quot; maxlength=&quot;14&quot; /&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">        &lt;/li&gt;</span><br><span class="line">      &lt;/ul&gt;</span><br><span class="line"></span><br><span class="line">      &lt;script src=&quot;https://code.jquery.com/jquery-1.10.2.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">      &lt;script src=&quot;/socket.io/socket.io.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">      &lt;script src=&quot;/main.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">//main.js</span></span><br><span class="line"></span><br><span class="line">  $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> FADE_TIME = <span class="number">150</span>; <span class="comment">// ms</span></span><br><span class="line">  <span class="keyword">var</span> TYPING_TIMER_LENGTH = <span class="number">400</span>; <span class="comment">// ms</span></span><br><span class="line">  <span class="keyword">var</span> COLORS = [</span><br><span class="line">    <span class="string">'#e21400'</span>, <span class="string">'#91580f'</span>, <span class="string">'#f8a700'</span>, <span class="string">'#f78b00'</span>,</span><br><span class="line">    <span class="string">'#58dc00'</span>, <span class="string">'#287b00'</span>, <span class="string">'#a8f07a'</span>, <span class="string">'#4ae8c4'</span>,</span><br><span class="line">    <span class="string">'#3b88eb'</span>, <span class="string">'#3824aa'</span>, <span class="string">'#a700ff'</span>, <span class="string">'#d300e7'</span></span><br><span class="line">  ]; <span class="comment">//分配给用户名字的颜色</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Initialize variables 初始化变量</span></span><br><span class="line">  <span class="keyword">var</span> $<span class="built_in">window</span> = $(<span class="built_in">window</span>);</span><br><span class="line">  <span class="keyword">var</span> $usernameInput = $(<span class="string">'.usernameInput'</span>); <span class="comment">// Input for username</span></span><br><span class="line">  <span class="keyword">var</span> $messages = $(<span class="string">'.messages'</span>); <span class="comment">// Messages area</span></span><br><span class="line">  <span class="keyword">var</span> $inputMessage = $(<span class="string">'.inputMessage'</span>); <span class="comment">// Input message input box</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> $loginPage = $(<span class="string">'.login.page'</span>); <span class="comment">// The login page</span></span><br><span class="line">  <span class="keyword">var</span> $chatPage = $(<span class="string">'.chat.page'</span>); <span class="comment">// The chatroom page</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Prompt for setting a username</span></span><br><span class="line">  <span class="keyword">var</span> username;</span><br><span class="line">  <span class="keyword">var</span> connected = <span class="literal">false</span>; <span class="comment">//初始化未连接</span></span><br><span class="line">  <span class="keyword">var</span> typing = <span class="literal">false</span>; <span class="comment">//初始化 未正在打字</span></span><br><span class="line">  <span class="keyword">var</span> lastTypingTime; <span class="comment">// 上一次打字时间</span></span><br><span class="line">  <span class="keyword">var</span> $currentInput = $usernameInput.focus(); <span class="comment">//自动给焦点到input</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> socket = io(); <span class="comment">//开启socket</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">//此函数用来显示现在有多少人正在连接</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">addParticipantsMessage</span>(<span class="params">data</span>) </span>&#123;  <span class="comment">//这里的data就是socket发送的数据</span></span><br><span class="line">    <span class="keyword">var</span> message = <span class="string">''</span>;</span><br><span class="line">    <span class="keyword">if</span> (data.numUsers === <span class="number">1</span>) &#123;</span><br><span class="line">      message += <span class="string">"there's 1 participant"</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      message += <span class="string">"there are "</span> + data.numUsers + <span class="string">" participants"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    log(message);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Sets the client's username 设置客户端用户名</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">setUsername</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    username = cleanInput($usernameInput.val().trim()); <span class="comment">//去掉空格</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// If the username is valid 用户名存在，那么</span></span><br><span class="line">    <span class="keyword">if</span> (username) &#123;</span><br><span class="line">      $loginPage.fadeOut();</span><br><span class="line">      $chatPage.show();</span><br><span class="line">      $loginPage.off(<span class="string">'click'</span>); <span class="comment">//移除loginpage上面的click事件</span></span><br><span class="line">      $currentInput = $inputMessage.focus();</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Tell the server your username 告诉服务器你叫什么</span></span><br><span class="line">      <span class="comment">// 服务器端 socket.on('add user')接收</span></span><br><span class="line">      socket.emit(<span class="string">'add user'</span>, username);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Sends a chat message  发送一条消息</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">sendMessage</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> message = $inputMessage.val();</span><br><span class="line">    <span class="comment">// Prevent markup from being injected into the message</span></span><br><span class="line">    message = cleanInput(message);</span><br><span class="line">    <span class="comment">// if there is a non-empty message and a socket connection</span></span><br><span class="line">    <span class="keyword">if</span> (message &amp;&amp; connected) &#123; <span class="comment">//如果有消息且链接正常，那么发送消息</span></span><br><span class="line">      $inputMessage.val(<span class="string">''</span>);</span><br><span class="line">      addChatMessage(&#123; <span class="comment">//构建前端页面显示样式的函数</span></span><br><span class="line">        username: username,</span><br><span class="line">        message: message</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="comment">// tell server to execute 'new message' and send along one parameter</span></span><br><span class="line">      socket.emit(<span class="string">'new message'</span>, message); <span class="comment">//告诉服务器有新的消息了</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Log a message 打印一条消息</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">log</span>(<span class="params">message, options</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> $el = $(<span class="string">'&lt;li&gt;'</span>).addClass(<span class="string">'log'</span>).text(message);</span><br><span class="line">    addMessageElement($el, options);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Adds the visual chat message to the message list</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">addChatMessage</span>(<span class="params">data, options</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Don't fade the message in if there is an 'X was typing'</span></span><br><span class="line">    <span class="comment">// 如果有 x is typing 不要让这条消息消失</span></span><br><span class="line">    <span class="keyword">var</span> $typingMessages = getTypingMessages(data);</span><br><span class="line">    options = options || &#123;&#125;;</span><br><span class="line">    <span class="keyword">if</span> ($typingMessages.length !== <span class="number">0</span>) &#123;</span><br><span class="line">      options.fade = <span class="literal">false</span>;</span><br><span class="line">      $typingMessages.remove();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> $usernameDiv = $(<span class="string">'&lt;span class="username"/&gt;'</span>)</span><br><span class="line">      .text(data.username)</span><br><span class="line">      .css(<span class="string">'color'</span>, getUsernameColor(data.username));</span><br><span class="line">    <span class="keyword">var</span> $messageBodyDiv = $(<span class="string">'&lt;span class="messageBody"&gt;'</span>)</span><br><span class="line">      .text(data.message);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> typingClass = data.typing ? <span class="string">'typing'</span> : <span class="string">''</span>;</span><br><span class="line">    <span class="keyword">var</span> $messageDiv = $(<span class="string">'&lt;li class="message"/&gt;'</span>)</span><br><span class="line">      .data(<span class="string">'username'</span>, data.username) <span class="comment">//将名字添加到li里面</span></span><br><span class="line">      .addClass(typingClass)</span><br><span class="line">      .append($usernameDiv, $messageBodyDiv);</span><br><span class="line"></span><br><span class="line">    addMessageElement($messageDiv, options);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Adds the visual chat typing message 添加“”正在输入”的文本</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">addChatTyping</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    data.typing = <span class="literal">true</span>;</span><br><span class="line">    data.message = <span class="string">'is typing'</span>;</span><br><span class="line">    addChatMessage(data);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Removes the visual chat typing message  移除  </span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">removeChatTyping</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    getTypingMessages(data).fadeOut(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      $(<span class="keyword">this</span>).remove();</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Adds a message element to the messages and scrolls to the bottom</span></span><br><span class="line">  <span class="comment">// el - The element to add as a message</span></span><br><span class="line">  <span class="comment">// options.fade - If the element should fade-in (default = true)</span></span><br><span class="line">  <span class="comment">// options.prepend - If the element should prepend</span></span><br><span class="line">  <span class="comment">//   all other messages (default = false)</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">addMessageElement</span>(<span class="params">el, options</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> $el = $(el);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Setup default options</span></span><br><span class="line">    <span class="keyword">if</span> (!options) &#123;</span><br><span class="line">      options = &#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> options.fade === <span class="string">'undefined'</span>) &#123;</span><br><span class="line">      options.fade = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> options.prepend === <span class="string">'undefined'</span>) &#123;</span><br><span class="line">      options.prepend = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Apply options</span></span><br><span class="line">    <span class="keyword">if</span> (options.fade) &#123;</span><br><span class="line">      $el.hide().fadeIn(FADE_TIME);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (options.prepend) &#123;</span><br><span class="line">      $messages.prepend($el);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      $messages.append($el);</span><br><span class="line">    &#125;</span><br><span class="line">    $messages[<span class="number">0</span>].scrollTop = $messages[<span class="number">0</span>].scrollHeight;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Prevents input from having injected markup</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">cleanInput</span>(<span class="params">input</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> $(<span class="string">'&lt;div/&gt;'</span>).text(input).html();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Updates the typing event</span></span><br><span class="line">  <span class="comment">// 在 oninput 的时候，调用</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">updateTyping</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (connected) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!typing) &#123;</span><br><span class="line">        typing = <span class="literal">true</span>;</span><br><span class="line">        socket.emit(<span class="string">'typing'</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      lastTypingTime = (<span class="keyword">new</span> <span class="built_in">Date</span>()).getTime();</span><br><span class="line"></span><br><span class="line">      setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> typingTimer = (<span class="keyword">new</span> <span class="built_in">Date</span>()).getTime();</span><br><span class="line">        <span class="keyword">var</span> timeDiff = typingTimer - lastTypingTime;</span><br><span class="line">        <span class="keyword">if</span> (timeDiff &gt;= TYPING_TIMER_LENGTH &amp;&amp; typing) &#123;</span><br><span class="line">          socket.emit(<span class="string">'stop typing'</span>);</span><br><span class="line">          typing = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;, TYPING_TIMER_LENGTH);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Gets the 'X is typing' messages of a user</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">getTypingMessages</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> $(<span class="string">'.typing.message'</span>).filter(<span class="function"><span class="keyword">function</span>(<span class="params">i</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> $(<span class="keyword">this</span>).data(<span class="string">'username'</span>) === data.username;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Gets the color of a username through our hash function</span></span><br><span class="line">  <span class="comment">// 给username 分配一个颜色</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">getUsernameColor</span>(<span class="params">username</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Compute hash code</span></span><br><span class="line">    <span class="keyword">var</span> hash = <span class="number">7</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; username.length; i++) &#123;</span><br><span class="line">      hash = username.charCodeAt(i) + (hash &lt;&lt; <span class="number">5</span>) - hash;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Calculate color</span></span><br><span class="line">    <span class="keyword">var</span> index = <span class="built_in">Math</span>.abs(hash % COLORS.length);</span><br><span class="line">    <span class="keyword">return</span> COLORS[index];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Keyboard events</span></span><br><span class="line"></span><br><span class="line">  $<span class="built_in">window</span>.keydown(<span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Auto-focus the current input when a key is typed</span></span><br><span class="line">    <span class="keyword">if</span> (!(event.ctrlKey || event.metaKey || event.altKey)) &#123;</span><br><span class="line">      $currentInput.focus();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// When the client hits ENTER on their keyboard</span></span><br><span class="line">    <span class="keyword">if</span> (event.which === <span class="number">13</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (username) &#123;</span><br><span class="line">        sendMessage();</span><br><span class="line">        socket.emit(<span class="string">'stop typing'</span>);<span class="comment">//告诉服务器，我的消息写完了，可以发送</span></span><br><span class="line">        typing = <span class="literal">false</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        setUsername();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  $inputMessage.on(<span class="string">'input'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    updateTyping();</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Click events</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Focus input when clicking anywhere on login page</span></span><br><span class="line">  $loginPage.click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    $currentInput.focus();</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Focus input when clicking on the message input's border</span></span><br><span class="line">  $inputMessage.click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    $inputMessage.focus();</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Socket events</span></span><br><span class="line">  <span class="comment">//socket事件</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Whenever the server emits 'login', log the login message</span></span><br><span class="line">  socket.on(<span class="string">'login'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    connected = <span class="literal">true</span>;</span><br><span class="line">    <span class="comment">// Display the welcome message</span></span><br><span class="line">    <span class="keyword">var</span> message = <span class="string">"Welcome to Socket.IO Chat – "</span>;</span><br><span class="line">    log(message, &#123;</span><br><span class="line">      prepend: <span class="literal">true</span></span><br><span class="line">    &#125;);</span><br><span class="line">    addParticipantsMessage(data);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Whenever the server emits 'new message', update the chat body</span></span><br><span class="line">  socket.on(<span class="string">'new message'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    addChatMessage(data);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Whenever the server emits 'user joined', log it in the chat body</span></span><br><span class="line">  socket.on(<span class="string">'user joined'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    log(data.username + <span class="string">' joined'</span>);</span><br><span class="line">    addParticipantsMessage(data);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Whenever the server emits 'user left', log it in the chat body</span></span><br><span class="line">  socket.on(<span class="string">'user left'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    log(data.username + <span class="string">' left'</span>);</span><br><span class="line">    addParticipantsMessage(data);</span><br><span class="line">    removeChatTyping(data);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Whenever the server emits 'typing', show the typing message</span></span><br><span class="line">  socket.on(<span class="string">'typing'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    addChatTyping(data);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Whenever the server emits 'stop typing', kill the typing message</span></span><br><span class="line">  socket.on(<span class="string">'stop typing'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    removeChatTyping(data);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  socket.on(<span class="string">'disconnect'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    log(<span class="string">'you have been disconnected'</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  socket.on(<span class="string">'reconnect'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    log(<span class="string">'you have been reconnected'</span>);</span><br><span class="line">    <span class="keyword">if</span> (username) &#123;</span><br><span class="line">      socket.emit(<span class="string">'add user'</span>, username);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  socket.on(<span class="string">'reconnect_error'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    log(<span class="string">'attempt to reconnect has failed'</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;  实现功能：群体聊天，谁进了聊天室，谁离开了聊天室，一共有多少人&lt;/p&gt;
&lt;h2 id=&quot;服务器端&quot;&gt;&lt;a href=&quot;#服务器端&quot; class=&quot;headerlink&quot; title=&quot;服务器端&quot;&gt;&lt;/a&gt;服务器端&lt;/h2&gt;&lt;p&gt;  我们用express&lt;/p&gt;
&lt;p&gt; 
      
    
    </summary>
    
    
      <category term="socket.io" scheme="babylovelin.github.io/tags/socket-io/"/>
    
  </entry>
  
  <entry>
    <title>cordova安卓环境配置</title>
    <link href="babylovelin.github.io/2018/01/31/cordovaEnvConfig/"/>
    <id>babylovelin.github.io/2018/01/31/cordovaEnvConfig/</id>
    <published>2018-01-31T02:55:06.000Z</published>
    <updated>2018-01-31T06:54:33.203Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装cordova-CLI"><a href="#安装cordova-CLI" class="headerlink" title="安装cordova CLI"></a>安装cordova CLI</h2><p>1下载安装nodejs。在这之后你和以使用node和npm包管理工具 <br><br>2安装git <br><br>3安装cordova  在OS X和Linux上: <br><br><code>$ sudo npm install -g cordova</code></p><h2 id="创建App"><a href="#创建App" class="headerlink" title="创建App"></a>创建App</h2><p><code>$ cordova create myapp</code> 创建一个文件夹名叫做myapp的项目 <br></p><h2 id="给你的App添加平台"><a href="#给你的App添加平台" class="headerlink" title="给你的App添加平台"></a>给你的App添加平台</h2><p><code>$ cd myapp</code></p><p>这个时候查看config.xml 还没有添加平台和平台的版本</p><p><code>$ cordova platform add android --save</code> 这样就添加了一个安卓平台，默认情况下，会添加最新版本的。安卓7.0</p><p>这时候再去查看config.xml，会发现，里面添加了 <code>&lt;engine name=&quot;android&quot; spec=&quot;~7.0.0&quot; /&gt;</code></p><p>这表示，已经成功添加了安卓平台</p><p>检查平台设置：<code>cordova platform ls</code></p><p>控制台显示：说明已经安装 安卓7.0.0 可用为以下几个</p><p><code>Installed platforms:  android 7.0.0Available platforms:  browser ~5.0.1  ios ~4.5.4  osx ~4.0.1  windows ~5.0.0  www ^3.12.0</code></p><p>接下来我们来构建App</p><h2 id="构建App"><a href="#构建App" class="headerlink" title="构建App"></a>构建App</h2><p><code>$ cordova build</code></p><p>控制台提示：</p><p><code>Android Studio project detected(node:7751) UnhandledPromiseRejectionWarning:Unhandled promise rejection (rejection id: 1): Failed to find &#39;ANDROID_HOME&#39; environment variable.Try setting it manually.Failed to find &#39;android&#39; command in your &#39;PATH&#39;. Try update your &#39;PATH&#39; to include path to valid SDK directory.</code></p><p>说明没有安卓环境。需要安卓SDK，以及JDK。</p><p>接下来参考安卓平台指南</p><h2 id="安卓环境构建"><a href="#安卓环境构建" class="headerlink" title="安卓环境构建"></a>安卓环境构建</h2>  <h5>Java开发工具包 JDK</h5><p>  依次执行<code>sudo add-apt-repository ppa:webupd8team/java</code>,<code>sudo apt-get update</code>,<code>sudo apt-get install oracle-java8-installer</code></p><p>  执行 <code>java -version</code> 显示 openJDK 版本，这样 JDK就那装成功了。至于oracle JDK，需要的自行安装。</p><p>  <div class="note"><br>    <h5>提示</h5><br>    <p>如果安装不上，或者其他问题，可能是因为你已经安装过其他的版本，需要将其他版本卸载，安装java8</p><br>  </div><br>  1、 移除所有 Java相关包 (Sun, Oracle, OpenJDK, IcedTea plugins, GIJ):</p><p>  (1) apt-get update</p><p>  (2) apt-cache search java | awk ‘{print($1)}’ | grep -E -e ‘^(ia32-)?(sun|oracle)-java’ -e ‘^openjdk-‘ -e ‘^icedtea’ -e ‘^(default|gcj)-j(re|dk)’ -e ‘^gcj-(.*)-j(re|dk)’ -e ‘java-common’ | xargs sudo apt-get -y remove</p><p>  (3) apt-get -y autoremove</p><p>  2、清除配置信息:  dpkg -l | grep ^rc | awk ‘{print($2)}’ | xargs sudo apt-get -y purge</p><p>  3、清除java配置及缓存:  bash -c ‘ls -d /home/*/.java’ | xargs sudo rm -rf</p><p>  4、手动清除JVMs:  rm -rf /usr/lib/jvm/*</p>  <h5>安卓SDK</h5><p>  注意，在linux上要装linux版本的SDK。。。</p><p>  在Mac或者Linux上面，你可以使用文本编辑器来创建或者修改文件<code>~/.bash_profile</code></p><p>  为了设置一个环境变量，添加一行，使用export像下面这样(用你本地安装路径替代路径):</p><p>  <code>export ANDROID_HOME=/Development/android-sdk/</code> 路径从根路径开始写</p><p>  为了更新PATH,添加一行类似下面这样(路径替换为你本地的Android SDK安装路径):</p><p>  <code>export PATH=${PATH}:/Development/android-sdk/platform-tools:/Development/android-sdk/tools</code></p><p>  重新启动终端或者运行下面命令来看变化带来的反应:</p><p>  <code>$ source ~/.bash_profile</code></p><p>  如果没有任何反应，说明配好了。</p><p>  <div class="note info"><br>    <h5>注意<h5><br>    <p>目前版本，是需要android-26的，所以直接下载这个版本的SDK，或者下载android-studio，这个在调试项目时也会使用。<br>    在这个IDE里面，有SDK的管理工具。点击-26版本,下载一下就好了，这里面配置的SDK路径和设置的环境变量里面的路径是一致的。</p><br>  </h5></h5></div></p><h2 id="Gradle"><a href="#Gradle" class="headerlink" title="Gradle"></a>Gradle</h2><p>  安装Android-studio时，会自动下载gradle，不过，速度很慢，还可能中途断掉，所以，建议在官网上自行下载压缩包，然后配置环境变量。</p><p>  如果你不希望所有用户都使用这个配置，那么可以单独为自己的账号配置gradle环境，在自己账号的HOME目录下</p><p>  $vi ~/.bash_profile</p><p>  <code>export GRADLE_HOME=/home/tangzhiqiang/dev/gradle-2.6</code></p><p>  <code>export PATH=$GRADLE_HOME/bin:$PATH</code></p><p>  保存退出后，让修改及时生效，执行</p><p>  <code>$source /etc/profile</code></p><p>  查看gradle版本信息</p><p>  <code>$ gradle -version</code></p><p>  下边我们再执行</p><p>  <code>$ cordova requirements</code></p><p>  显示</p><p>  <code>Requirements check results for android:  Java JDK: installed 1.8.0  Android SDK: installed true  Android target: installed android-27,android-26,android-24,Google Inc.:Google  APIs:24,android-23,Google Inc.:Google APIs:23,android-22,Google Inc.:Google  APIs:22,android-21,Google Inc.:Google APIs:21,android-19,Google Inc.:Glass Development Kit  Preview:19,Google Inc.:Google APIs:19,android-18,Google Inc.:Google APIs:18,android-17,Google  Inc.:Google APIs:17,android-16,Google Inc.:Google APIs:16,android-15,Google Inc.:Google APIs:15  Gradle: installed /home/hhl/Android/gradle/gradle-4.4/bin/gradle</code></p><p>  这样环境就OK了。</p><h2 id="Build"><a href="#Build" class="headerlink" title="Build"></a>Build</h2><p>  执行</p><p>  <code>$ cordova build</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;安装cordova-CLI&quot;&gt;&lt;a href=&quot;#安装cordova-CLI&quot; class=&quot;headerlink&quot; title=&quot;安装cordova CLI&quot;&gt;&lt;/a&gt;安装cordova CLI&lt;/h2&gt;&lt;p&gt;1下载安装nodejs。在这之后你和以使用node和
      
    
    </summary>
    
    
      <category term="cordova" scheme="babylovelin.github.io/tags/cordova/"/>
    
  </entry>
  
  <entry>
    <title>cordova简介</title>
    <link href="babylovelin.github.io/2018/01/31/cordovaIntro/"/>
    <id>babylovelin.github.io/2018/01/31/cordovaIntro/</id>
    <published>2018-01-31T02:20:00.000Z</published>
    <updated>2018-01-31T02:51:50.341Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>cordova 是一个开源的移动开发框架，允许使用标准的web技术，<code>HTML5 CSS3 Javascript</code>进行跨平台开发。应用程序在每个平台的包装内置行，依靠标准的API来绑定每个设备的传感器，数据和网络状态～</p><h2 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h2><p>我们可以开发一个应用程序，将在不同的移动平台上使用。</p><h2 id="平台"><a href="#平台" class="headerlink" title="平台"></a>平台</h2><p><code>IOS</code>，<code>Android</code>，<code>Windows Phone</code>，<code>Amazon-fireos</code>，<code>黑莓</code>，<code>Firefox OS</code>，<code>Ubuntu</code>和<code>tizien</code></p><p><div class="note warning"><br>    <h5>限制</h5><br>    <p>混合应用程序比本地应用程序慢，因此对于需要大量数据和功能的大型应用程序使用Cordova不是最佳选择。</p><br></div><br>  </p><p>跨浏览器兼容性可能会产生很多问题。大多数时候，我们为不同的平台构建应用程序，所以测试和优化可能需要很多时间，因为我们需要覆盖大量的设备和操作系统。某些插件与不同的设备和平台存在兼容性问题。还有一些Cordova尚不支持的本机API。</p><p></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;cordova 是一个开源的移动开发框架，允许使用标准的web技术，&lt;code&gt;HTML5 CSS3 Javascript&lt;/code&gt;进行
      
    
    </summary>
    
    
      <category term="cordova" scheme="babylovelin.github.io/tags/cordova/"/>
    
  </entry>
  
  <entry>
    <title>辨析 Sass 中的 Map 和 List</title>
    <link href="babylovelin.github.io/2015/10/21/demo/"/>
    <id>babylovelin.github.io/2015/10/21/demo/</id>
    <published>2015-10-21T02:34:12.000Z</published>
    <updated>2018-01-30T08:21:28.030Z</updated>
    
    <content type="html"><![CDATA[<p>如果你使用过 Sass 3.3 之前的版本，那么你一定对那段时光颇有感触，那时候没有现如今这么好的条件，那时候的 Map 还只能用多重列表（lists of list）来模拟。多重列表可以实现复杂数据的嵌套定义，但却不是以键值对的形式实现的，所有当我们需要获取其中特定的某一项时就会比较麻烦。Map 这种数据类型天生就是基于键值对的形式，非常便于组织数据。</p><p>自从可以使用 Map 之后，开发者们开始毫无顾忌地定义 Map 存储数据，比如断点宽度、颜色值、栅格布局等等响应式排版的细节，都被一股脑的塞进了 Map 中。</p><p>那么，有了 Map 之后，我们还有必要使用 List 吗？可能某些人会觉得为了保持向后兼容应该继续使用多重列表模拟 Map，因为可能有些开发者仍然在使用老版本的 Sass 编译器，但实际上，这是多此一举了，Sass 的版本通常由 <code>package.json</code> 或者其他同类型的项目配置文件所控制，往往只需一条命令（<code>gem update sass</code>）即可更新 Sass 的版本，因此基本上无需考虑对老版本的兼容问题。</p><a id="more"></a><p>使用多重列表替代 Map 的优势之一就是减少代码量。下面让我们来比较一下多种列表和 Map 的语法结构以及遍历方式。</p><h2 id="测试表格"><a href="#测试表格" class="headerlink" title="测试表格"></a>测试表格</h2><table><thead><tr><th>Variable</th><th>Description</th></tr></thead><tbody><tr><td><code>site</code></td><td>Sitewide information.</td></tr><tr><td><code>page</code></td><td>Page specific information and custom variables set in front-matter.</td></tr><tr><td><code>config</code></td><td>Site configuration</td></tr><tr><td><code>theme</code></td><td>Theme configuration. Inherits from site configuration.</td></tr><tr><td><code>_</code> (single underscore)</td><td><a href="http://lodash.com/" target="_blank" rel="noopener">Lodash</a> library</td></tr><tr><td><code>path</code></td><td>Path of current page</td></tr><tr><td><code>url</code></td><td>Full URL of current page</td></tr><tr><td><code>env</code></td><td>Environment variables</td></tr></tbody></table><h2 id="语法比较"><a href="#语法比较" class="headerlink" title="语法比较"></a>语法比较</h2><div class="note"><br>    <h5>测试标题</h5><br>    <p>在下面的示例中，我创建了一个用于控制响应式布局的数据，该数据一共有四个断点，每一个断点都包含了 <code>min-width</code>、<code>max-width</code>、<code>font-size</code> 和 <code>line-height</code> 四个样式。</p><br></div><h4 id="Map-语法"><a href="#Map-语法" class="headerlink" title="Map 语法"></a>Map 语法</h4><p>下面就是使用 Map 存储的数据，具体来说，该 Map 中首先存储了四个用于标识断点的 Key，相对应的是保存具体属性值得 Value。虽然这种形式可读性更高，但是总体代码量却高达 26 行 450 个字符。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">$breakpoint-map: (</span><br><span class="line">    small: (</span><br><span class="line">        min-width: null,</span><br><span class="line">        max-width: 479px,</span><br><span class="line">        base-font: 16px,</span><br><span class="line">        vertical-rhythm: 1.3</span><br><span class="line">    ),</span><br><span class="line">    medium: (</span><br><span class="line">        min-width: 480px,</span><br><span class="line">        max-width: 959px,</span><br><span class="line">        base-font: 18px,</span><br><span class="line">        vertical-rhythm: 1.414</span><br><span class="line">    ),</span><br><span class="line">    large: (</span><br><span class="line">        min-width: 960px,</span><br><span class="line">        max-width: 1099px,</span><br><span class="line">        base-font: 18px,</span><br><span class="line">        vertical-rhythm: 1.5</span><br><span class="line">    ),</span><br><span class="line">    xlarge: (</span><br><span class="line">        min-width: 1100px,</span><br><span class="line">        max-width: null,</span><br><span class="line">        base-font: 21px,</span><br><span class="line">        vertical-rhythm: 1.618</span><br><span class="line">    )</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h4 id="多重列表语法"><a href="#多重列表语法" class="headerlink" title="多重列表语法"></a>多重列表语法</h4><p>下面的多重列表存储了和上面 Map 同样的数据，在多重列表中没有 Key-Value 的对应关系，这意味着要想找到特定的值，必须使用遍历或 <code>nth()</code> 的方式来实现了。从另一个角度来看，多种列表又比 Map 的代码量小得多，总共只有六行 180 个字符。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$breakpoint-list: (</span><br><span class="line">    (small, null, 479px, 16px, 1.3),</span><br><span class="line">    (medium, 480px, 959px, 18px, 1.414),</span><br><span class="line">    (large, 960px, 1099px, 18px, 1.5),</span><br><span class="line">    (xlarge, 1100px, null, 21px, 1.618)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="遍历比较"><a href="#遍历比较" class="headerlink" title="遍历比较"></a>遍历比较</h2><div class="note info"><br>    <h5>测试标题</h5><br>    <p>从上面简单地比较中可以粗略的看出，多种列表的代码量明显少于 Map。但是，如果我们需要遍历这些值得话，复杂度又是怎样的呢？</p><br></div><h4 id="遍历-Map"><a href="#遍历-Map" class="headerlink" title="遍历 Map"></a>遍历 Map</h4><p>我们可以使用如下的代码遍历 Map：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@each $label, $map in $breakpoint-map &#123;&#125;</span><br></pre></td></tr></table></figure><p>这里的变量 <code>$label</code> 和 <code>$map</code> 会随着对 <code>$breakpoint-map</code> 的遍历被动态地赋值，<code>$label</code> 将会被赋值为 <code>$breakpoint-map</code> 的 Key，而 <code>$map</code> 会被赋值为 <code>$breakpoint-map</code> 的 Value。为了在遍历过程中获取特定值，我们就需要使用 Sass 原生的 <code>map-get()</code> 函数，使用该函数需要传入两个参数：Map 的名字和求取的 Key，最后返回该 Map 中匹配该 Key 的 Value。</p><p>具体的做法就是使用 <code>@each</code> 遍历 Map，然后使用 <code>map-get()</code> 获取特定值，最终只需要六行代码 220 个字符即可完成整个遍历：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@each $label, $map in $breakpoint-map &#123;</span><br><span class="line">    $min-width: map-get($map, min-width);</span><br><span class="line">    $max-width: map-get($map, max-width);</span><br><span class="line">    $base-font: map-get($map, base-font);</span><br><span class="line">    $vertical-rhythm: map-get($map, vertical-rhythm);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="遍历多重列表"><a href="#遍历多重列表" class="headerlink" title="遍历多重列表"></a>遍历多重列表</h4><p>遍历多重列表不必像遍历 Map 一样动态获取到 Map 后再使用 <code>map-get()</code> 函数取特定值，直接遍历一遍即可获得特定值。</p><p>因为多种列表内层的每一个列表结构相同，都有按照相同顺序排列的五个值，所以我们可以持续遍历每个值并赋值给特定的变量。无需调用 <code>map-get()</code>，直接引用这些变量即可进行赋值等裸机操作。最终遍历多重列表只使用了两行代码 100 个字符：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@each $label, $min-width, $max-width, $base-font, $vertical-rhythm in $breakpoint-list &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="慎用多重列表"><a href="#慎用多重列表" class="headerlink" title="慎用多重列表"></a>慎用多重列表</h2><div class="note warning"><br>    <h5>测试标题</h5><br>    <p>经过上述的比对，看起来多重列表各方面都在碾压 Map，实则不然，Sass 中添加 Map 有一条非常重要的原因就是：Key-Value 的映射关系。</p><br></div><h4 id="遗漏键值"><a href="#遗漏键值" class="headerlink" title="遗漏键值"></a>遗漏键值</h4><p>如果要使用多重列表，那么就必须保证自己非常熟悉多重列表内部的每一项所代表的意义。下面我们举个例子，来看看遗漏了某些值的情况：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">$breakpoint-list: (</span><br><span class="line">    (small, null, 479px, 16px, 1.3),</span><br><span class="line">    (medium, 480px, 959px, 18px, 1.414),</span><br><span class="line">    (large, 960px, 1099px, 18px, 1.5),</span><br><span class="line">    (xlarge, 1100px, 21px, 1.618)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">p &#123;</span><br><span class="line">    @each $label, $min-width, $max-width, $base-font, $vertical-rhythm in $breakpoint-list &#123;</span><br><span class="line">        @if $min-width &#123;</span><br><span class="line">            @include breakpoint( $min-width ) &#123;</span><br><span class="line">                font-size: $base-font;</span><br><span class="line">                line-height: $vertical-rhythm;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; @else &#123;</span><br><span class="line">            font-size: $base-font;</span><br><span class="line">            line-height: $vertical-rhythm;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当我们尝试运行这段代码时，结果肯定是错误地，因为在 <code>$breakpoint-list</code> 的最后一行，<code>xlarge</code> 被赋值给了 <code>$label</code>，<code>1100px</code> 被赋值给了 <code>$min-width</code>，<code>21px</code> 被赋值给了 <code>$max-width</code>, <code>1.618</code> 被赋值给了 <code>$base-font</code>，最终导致 <code>$vertical-rhythm</code> 没有被赋值，结果就是 <code>font-size</code> 的属性值是错的，<code>line-height</code> 的属性值是空的。此外，Sass 还不会对此抛出错误，导致我们无从知晓错误所在。</p><p>如果我们使用 Map 来代替这里的多重列表，那么使用 <code>map-get()</code> 函数即使遇见空值也能正确获得想要的结果。这就是值得我们慎重思考的地方：多种列表虽然简单快速，但是丧失了 Map 中的容错能力和快速取值能力。</p><h4 id="查找特定列表"><a href="#查找特定列表" class="headerlink" title="查找特定列表"></a>查找特定列表</h4><p>在多重列表中查找特定列表简直就是一种折磨。如果使用 Map，那么配合 <code>map-get()</code> 函数可以快速定位到特定子 Map：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$medium-map: map-get($maps, medium);</span><br></pre></td></tr></table></figure><p>但如果要获取多种列表 <code>medium</code> 列表，麻烦可就大了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@function get-list($label) &#123;</span><br><span class="line">    @each $list in $breakpoint-list &#123;</span><br><span class="line">        @if nth($list, 1) == $label &#123;</span><br><span class="line">            @return $list;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    @return null;</span><br><span class="line">&#125;</span><br><span class="line">$medium-list: get-list(medium);</span><br></pre></td></tr></table></figure><p>这段代码的逻辑就是遍历整个多重列表，知道找到第一个匹配项，然后返回，如果一直没有找到匹配项，就一直遍历到末尾，然后返回 <code>null</code>。这实际上就是手工实现了 <code>map-get()</code> 的逻辑。</p><h4 id="缺少原生的-Map-函数"><a href="#缺少原生的-Map-函数" class="headerlink" title="缺少原生的 Map 函数"></a>缺少原生的 Map 函数</h4><p>Sass 提供了诸多的原生函数用于处理 Map 数据类型，但是多重列表是没法调用这些函数的，比如，使用 <code>map-merge()</code> 可以合并两个 Map，如果两个 Map 有相同的值，则取第二个 Map 的值为最终值。当然你也可以在多重列表中使用 <code>join()</code> 或 <code>append()</code> 来增加新列表，从而模拟出 <code>map-merge()</code> 的效果。</p><p>另一个实用的 Map 函数就是 <code>map-has-key()</code>，对于依赖 <code>map-get()</code> 的自定义函数来说，<code>map-has-key()</code> 可以用来验证特定的 Key 是否存在。但在列表中是完全没有相似的方法。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><div class="note unreleased"><br>    <h5>Test Title</h5><br>    <p>相比起列表来说，Key-Value 模型的 Map 显然更有力量，原生的 Sass Map 函数更是提供了强力的数据查找和验证工具。</p><br></div><p>虽然多重列表代码量少，但并不能像 Map 一样进行错误检查或验证参数。在大多数时候，相比较多重列表而言，我相信 Map 是更好的选择。如果是为了更少的代码量和其他简单地调用，那么我偶尔会用用多重列表，但是从项目的宏观控制和数据存储方面显然更优秀。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如果你使用过 Sass 3.3 之前的版本，那么你一定对那段时光颇有感触，那时候没有现如今这么好的条件，那时候的 Map 还只能用多重列表（lists of list）来模拟。多重列表可以实现复杂数据的嵌套定义，但却不是以键值对的形式实现的，所有当我们需要获取其中特定的某一项时就会比较麻烦。Map 这种数据类型天生就是基于键值对的形式，非常便于组织数据。&lt;/p&gt;
&lt;p&gt;自从可以使用 Map 之后，开发者们开始毫无顾忌地定义 Map 存储数据，比如断点宽度、颜色值、栅格布局等等响应式排版的细节，都被一股脑的塞进了 Map 中。&lt;/p&gt;
&lt;p&gt;那么，有了 Map 之后，我们还有必要使用 List 吗？可能某些人会觉得为了保持向后兼容应该继续使用多重列表模拟 Map，因为可能有些开发者仍然在使用老版本的 Sass 编译器，但实际上，这是多此一举了，Sass 的版本通常由 &lt;code&gt;package.json&lt;/code&gt; 或者其他同类型的项目配置文件所控制，往往只需一条命令（&lt;code&gt;gem update sass&lt;/code&gt;）即可更新 Sass 的版本，因此基本上无需考虑对老版本的兼容问题。&lt;/p&gt;
    
    </summary>
    
    
      <category term="css" scheme="babylovelin.github.io/tags/css/"/>
    
  </entry>
  
</feed>
